/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ServicesIndexRouteImport } from './routes/services/index'
import { Route as LandingIndexRouteImport } from './routes/landing/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as AboutIndexRouteImport } from './routes/about/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicesIndexRoute = ServicesIndexRouteImport.update({
  id: '/services/',
  path: '/services/',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingIndexRoute = LandingIndexRouteImport.update({
  id: '/landing/',
  path: '/landing/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutIndexRoute
  '/home': typeof HomeIndexRoute
  '/landing': typeof LandingIndexRoute
  '/services': typeof ServicesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutIndexRoute
  '/home': typeof HomeIndexRoute
  '/landing': typeof LandingIndexRoute
  '/services': typeof ServicesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about/': typeof AboutIndexRoute
  '/home/': typeof HomeIndexRoute
  '/landing/': typeof LandingIndexRoute
  '/services/': typeof ServicesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/home' | '/landing' | '/services'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/home' | '/landing' | '/services'
  id: '__root__' | '/' | '/about/' | '/home/' | '/landing/' | '/services/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutIndexRoute: typeof AboutIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  LandingIndexRoute: typeof LandingIndexRoute
  ServicesIndexRoute: typeof ServicesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services/': {
      id: '/services/'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/landing/': {
      id: '/landing/'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutIndexRoute: AboutIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  LandingIndexRoute: LandingIndexRoute,
  ServicesIndexRoute: ServicesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
